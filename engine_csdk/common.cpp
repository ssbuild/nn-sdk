#include "common.h"


#if _WIN32
//#include <Windows.h>
#else
#define TCHAR
#endif

struct S_user_config the_config;

bool my_PyDict_HasItemString(PyObject* dict, const char*k) {
	auto tmp_K = PyUnicode_FromString(k);
	int ret = PyDict_Contains(dict, tmp_K);
	Py_DECREF(tmp_K);
	return ret == 1;
}

PyObject* my_PyDict_GetItemString(PyObject* dict, const char*k) {
	auto tmp_K = PyUnicode_FromString(k);
	auto out = PyDict_GetItem(dict, tmp_K);
	Py_DECREF(tmp_K);
	return out;
}


PyObject* my_PyObject_GetAttrString(PyObject* dict, const char*k) {
	auto tmp_K = PyUnicode_FromString(k);
	auto out = PyObject_GetAttr(dict, tmp_K);
	Py_DECREF(tmp_K);
	return out;
}


PyObject* my_PyObject_GetItemString(PyObject* dict, const char*k) {
	auto tmp_K = PyUnicode_FromString(k);
	auto out = PyObject_GetItem(dict, tmp_K);
	Py_DECREF(tmp_K);
	return out;
}

int ParseEngineVersion(PyObject* oengine_module,std::string & version,int ver[2]) {
	auto runtime = py::cast<py::module_>(oengine_module);
	
	try {
		if (py::hasattr(oengine_module, "__version__")) {
			version = py::str(runtime.attr("__version__")).operator std::string();
			std::vector<std::string> result;
			My_splict_string(version, ".", result);
			if (result.size() > 2) {
				ver[0] = atoi(result[0].c_str());
				ver[1] = atoi(result[1].c_str());
				log_info("engine version %s\n", version.c_str());
				return 0;
			}
		}
	}
	catch (std::exception& e) {
		log_err("%s except %s\n",__FUNCTION__,e.what());
	}
	return -1;
}

int Set_cuda_visible_device(int device_id) {
	{
		auto name = PyUnicode_FromString("os");
		auto oOS = PyImport_ImportModuleLevelObject(name, NULL, NULL, NULL, 0);
		Py_DECREF(name);
		if (oOS) {
			auto oputenv = PyObject_GetAttrString(oOS, "putenv");
			if (oputenv) {
				log_info("set device_id %d\n", device_id);
				auto args = PyTuple_New(2);
				PyTuple_SetItem(args, 0, PyUnicode_FromString("CUDA_VISIBLE_DEVICES"));
				PyTuple_SetItem(args, 1, PyUnicode_FromFormat("%d", device_id));
				auto oret = PyObject_CallObject(oputenv, args);
				if (oret) {
					Py_DECREF(oret);
				}
				Py_DECREF(args);
				Py_DECREF(oputenv);
			}
			Py_DECREF(oOS);
			return 0;
		}
	}
	return -1;
}




int Get_dtype_from_string(const char* str_data_type) {

	int data_type = 0;
	if (mystrcmp(str_data_type, "int") == 0 ||
		mystrcmp(str_data_type, "int32") == 0 ||
		mystrcmp(str_data_type, "long") == 0) {
		data_type = NPY_INT;
	}
	else if (mystrcmp(str_data_type, "uint") == 0 ||
		mystrcmp(str_data_type, "uint32") == 0 ||
		mystrcmp(str_data_type, "ulong") == 0) {
		data_type = NPY_UINT;
	}
	else if (mystrcmp(str_data_type, "int64") == 0 ||
		mystrcmp(str_data_type, "longlong") == 0) {
		data_type = NPY_LONGLONG;
	}
	else if (mystrcmp(str_data_type, "uint64") == 0 ||
		mystrcmp(str_data_type, "ulonglong") == 0) {
		data_type = NPY_ULONGLONG;
	}
	else if (mystrcmp(str_data_type, "float") == 0 ||
	        mystrcmp(str_data_type, "float32") == 0
	) {
		data_type = NPY_FLOAT;
	}
	else if (mystrcmp(str_data_type, "float64") == 0 || mystrcmp(str_data_type, "double") == 0) {
		data_type = NPY_DOUBLE;
	}
	else if (mystrcmp(str_data_type, "str") == 0) {
		data_type = NPY_STRING;
	}
	else {
		log_warn("%s get a dtype %s no support and set to int64\n", __FUNCTION__,str_data_type);
		log_info("support int int32 int64 long longlong uint uint32 uint64 ulong ulonglong float float32 float64 double str\n");
		return NPY_LONGLONG;
	}
	return data_type;
}


int Get_dsize_by_type(int np_type) {
	int data_len = 4;
	if (np_type == NPY_INT  || np_type == NPY_UINT || 
		np_type == NPY_FLOAT ||
		np_type == NPY_LONG || np_type == NPY_ULONG) {
		data_len = 4;
	}
	else if (np_type == NPY_LONGLONG || np_type == NPY_ULONGLONG || np_type == NPY_DOUBLE) {
		data_len = 8;
	}
	else if (np_type == NPY_STRING) {
		data_len = 8;
	}
	return data_len;
}


void Get_dtype_string(int data_type, std::string& dtype_short, std::string& dtype_long){
	if (data_type == NPY_INT) {
		dtype_long = "int32";
		dtype_short = "i";
	}
	else if (data_type == NPY_UINT) {
		dtype_long = "uint32";
		dtype_short = "I";
	}
	else if (data_type == NPY_LONGLONG) {
		dtype_long = "int64";
		dtype_short = "L";
	}
	else if (data_type == NPY_ULONGLONG) {
		dtype_long = "uint64";
		dtype_short = "K";
	}
	else if (data_type == NPY_FLOAT) {
		dtype_long = "float32";
		dtype_short = "f";
	}
	else if (data_type == NPY_DOUBLE) {
		dtype_long = "float64";
		dtype_short = "d";
	}
	else if (data_type == NPY_STRING) {
		dtype_long = "str";
		dtype_short = "s";
	}
	else {
		dtype_long = "int64";
		dtype_short = "L";
	}
}
//void get_data_type_short_string(int data_type, char* buf) {
//	if (data_type == NPY_INT) {
//		buf[0] = 'i';
//	}
//	else if (data_type == NPY_UINT) {
//		buf[0] = 'I';
//	}
//	else if (data_type == NPY_LONGLONG) {
//		buf[0] = 'L';
//	}
//	else if (data_type == NPY_ULONGLONG) {
//		buf[0] = 'K';
//	}
//	else if (data_type == NPY_FLOAT) {
//		buf[0] = 'f';
//	}
//	else if (data_type == NPY_DOUBLE) {
//		buf[0] = 'd';
//	}
//	else if (data_type == NPY_STRING) {
//		buf[0] = 's';
//	}
//	else {
//		buf[0] = 'L';
//	}
//}

void LOG_V(E_log_level level, const char* format, va_list& args) {
	if (level > the_config.log_level) {
		return;
	}
	if (level & LOG_LEVEL_FATAL) {
		printf("NN-SDK Fatal: \t");
	}
	else if (level & LOG_LEVEL_ERR) {
		printf("NN-SDK Error: \t");
	}
	else if (level & LOG_LEVEL_WARN) {
		printf("NN-SDK Warn: \t");
	}
	else if (level & LOG_LEVEL_INFO) {
		printf("NN-SDK Info: \t");
	}
	else if (level & LOG_LEVEL_DEUBG) {
		printf("NN-SDK Debug: \t");
	}
	vprintf(format, args);
	/*va_list args;
	va_start(args, format);
	vprintf(format, args);
	va_end(args);*/
}

void log_direct(const char* format, ...) {
	va_list args;
	va_start(args, format);
	LOG_V(LOG_LEVEL_DIRECT, format, args);
	va_end(args);
}


void log_fatal(const char* format, ...) {
	va_list args;
	va_start(args, format);
	LOG_V(LOG_LEVEL_FATAL, format, args);
	va_end(args);
}

void log_warn(const char* format, ...) {
	va_list args;
	va_start(args, format);
	LOG_V(LOG_LEVEL_WARN, format, args);
	va_end(args);
}

void log_err(const char* format, ...) {
	va_list args;
	va_start(args, format);
	LOG_V(LOG_LEVEL_ERR, format, args);
	va_end(args);
}

void log_info(const char* format, ...) {
	va_list args;
	va_start(args, format);
	LOG_V(LOG_LEVEL_INFO, format, args);
	va_end(args);
}

void log_debug(const char* format, ...) {
	va_list args;
	va_start(args, format);
	LOG_V(LOG_LEVEL_DEUBG, format, args);
	va_end(args);
}


void My_splict_string(std::string src, const char* splict, std::vector<std::string>& vec_string)
{
	size_t last_pos = 0, pos = 0;
	auto s_len = strlen(splict);
	do {
		if (last_pos >= src.length()) {
			break;
		}
		pos = src.find(splict, last_pos);
		if (pos == -1) {
			vec_string.push_back(src.substr(last_pos));
			break;
		}

		vec_string.push_back(src.substr(last_pos, pos - last_pos));
		last_pos = pos + s_len;
	} while (1);

}


void GetList_to_buffer(PyObject* oList, char*& buffer) {
	int ss = PyList_Size(oList);
	PyListObject* list = (PyListObject*)oList;
	for (int i = 0; i < ss; ++i) {
		auto item = list->ob_item[i];
		if (item->ob_type->tp_itemsize == 0) {
			if (item->ob_type->tp_name[0] == 'l') {//list
				GetList_to_buffer(item, buffer);
			}
			else if (item->ob_type->tp_name[0] == 's') {//str
				const char* val = PyUnicode_AsUTF8(item);
				long long l_val = (long long)val;
				memcpy(buffer,&l_val,sizeof(long long));
				//*(long long*)buffer =(long long)val;
				buffer += sizeof(char*);
			}
		}
		else if (item->ob_type->tp_name[0] == 'f') {//float
			float val = (float)PyFloat_AS_DOUBLE(item);
			*(float*)buffer = val;
			buffer += sizeof(float);
		}
		else if (item->ob_type->tp_name[0] == 'i') {//int
			int val = (int)PyLong_AsLong(item);
			*(int*)buffer = val;
			buffer += sizeof(int);
		}
		
	}
}


int read_file(const char*filename, std::string &content) {
	try {
		std::ifstream in(filename, std::ios::in | std::ios::binary);
		if (!in) {
			log_err("readfile %s failed\n", filename);
			return -1;
		}
		in.seekg(0, in.end);
		auto nFileLen = in.tellg();
		in.seekg(0, in.beg);
		content.resize(nFileLen);
		in.read((char*)content.data(), nFileLen);
		in.close();
		return nFileLen;
	}
	catch (std::exception& e) {
		log_err("%s except %s\n", filename,e.what());
	}
	return -1;
}

int write_file(const char*filename, std::string &content) {
	std::ofstream out(filename, std::ios::out | std::ios::binary);
	if (!out) {
		printf("readfile %s failed\n", filename);
		return -1;
	}
	out.write(content.c_str(), content.size());
	return content.size();
}



//分组密码有五种工作体制：
//1.电码本模式（Electronic Codebook Book(ECB)）；
//2.密码分组链接模式（Cipher Block Chaining(CBC)）；
//3.计算器模式（Counter(CTR)）；
//4.密码反馈模式（Cipher FeedBack(CFB)）；
//5.输出反馈模式（Output FeedBack(OFB)）。


int tk_aes_encode(uint8_t* plain_text,int plain_length,  std::string & encrypt_buffer, uint8_t* key, uint8_t*iv) {

	struct AES_ctx ctx;
	//uint8_t iv[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
	AES_init_ctx_iv(&ctx, key, iv);

	int nblock = plain_length / AES_BLOCKLEN;
	int yy = plain_length % AES_BLOCKLEN;

	int buffer_length = (nblock + 1) * AES_BLOCKLEN;
	encrypt_buffer.resize(buffer_length);

	memcpy((uint8_t*)encrypt_buffer.c_str(), plain_text, plain_length);
	if (yy != 0) {
		memcpy((uint8_t*)encrypt_buffer.c_str() + nblock * AES_BLOCKLEN, plain_text + (nblock * AES_BLOCKLEN), yy);
		memset((uint8_t*)encrypt_buffer.c_str() + nblock * AES_BLOCKLEN + yy, AES_BLOCKLEN - yy, AES_BLOCKLEN - yy);
	}
	else {
		memset((uint8_t*)encrypt_buffer.c_str() + nblock * AES_BLOCKLEN, 0, AES_BLOCKLEN);
	}

	AES_CBC_encrypt_buffer(&ctx, (uint8_t*)encrypt_buffer.c_str(), buffer_length);
	return 0;
}

int tk_aes_decode(uint8_t*encrypt_buffer, int encrypt_length, std::string & plain_text_buffer, uint8_t* key, uint8_t*iv) {

	if (encrypt_length <= 0) {
		return -1;
	}
	struct AES_ctx ctx;
	//uint8_t iv[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
	AES_init_ctx_iv(&ctx, key, iv);

	std::string tmp;
	tmp.resize(encrypt_length);
	memcpy((uint8_t*)tmp.c_str(),encrypt_buffer, encrypt_length);
	AES_CBC_decrypt_buffer(&ctx, (uint8_t*)tmp.c_str(), encrypt_length);

	
	int plain_length = 0;
	if (tmp[encrypt_length - 1] == 0) {
		plain_length = encrypt_length - AES_BLOCKLEN;
	}
	else {
		if (tmp[encrypt_length - 1] >= AES_BLOCKLEN) {
			return -1;
		}
		plain_length = encrypt_length - tmp[encrypt_length - 1];
	}
	plain_text_buffer.resize(plain_length);
	memcpy((uint8_t*)plain_text_buffer.c_str(), (uint8_t*)tmp.c_str(), plain_length);
	return 0;
}



// prints string as hex
static void phex(uint8_t* str)
{

#if defined(AES256)
	uint8_t len = 32;
#elif defined(AES192)
	uint8_t len = 24;
#elif defined(AES128)
	uint8_t len = 16;
#endif

	unsigned char i;
	for (i = 0; i < len; ++i)
		printf("%.2x", str[i]);
	printf("\n");
}

static void test_encrypt_ecb_verbose(void)
{
	// Example of more verbose verification

	uint8_t i;

	// 128bit key
	uint8_t key[16] = { (uint8_t)0x2b, (uint8_t)0x7e, (uint8_t)0x15, (uint8_t)0x16, (uint8_t)0x28, (uint8_t)0xae, (uint8_t)0xd2, (uint8_t)0xa6, (uint8_t)0xab, (uint8_t)0xf7, (uint8_t)0x15, (uint8_t)0x88, (uint8_t)0x09, (uint8_t)0xcf, (uint8_t)0x4f, (uint8_t)0x3c };
	// 512bit text
	uint8_t plain_text[64] = { (uint8_t)0x6b, (uint8_t)0xc1, (uint8_t)0xbe, (uint8_t)0xe2, (uint8_t)0x2e, (uint8_t)0x40, (uint8_t)0x9f, (uint8_t)0x96, (uint8_t)0xe9, (uint8_t)0x3d, (uint8_t)0x7e, (uint8_t)0x11, (uint8_t)0x73, (uint8_t)0x93, (uint8_t)0x17, (uint8_t)0x2a,
							   (uint8_t)0xae, (uint8_t)0x2d, (uint8_t)0x8a, (uint8_t)0x57, (uint8_t)0x1e, (uint8_t)0x03, (uint8_t)0xac, (uint8_t)0x9c, (uint8_t)0x9e, (uint8_t)0xb7, (uint8_t)0x6f, (uint8_t)0xac, (uint8_t)0x45, (uint8_t)0xaf, (uint8_t)0x8e, (uint8_t)0x51,
							   (uint8_t)0x30, (uint8_t)0xc8, (uint8_t)0x1c, (uint8_t)0x46, (uint8_t)0xa3, (uint8_t)0x5c, (uint8_t)0xe4, (uint8_t)0x11, (uint8_t)0xe5, (uint8_t)0xfb, (uint8_t)0xc1, (uint8_t)0x19, (uint8_t)0x1a, (uint8_t)0x0a, (uint8_t)0x52, (uint8_t)0xef,
							   (uint8_t)0xf6, (uint8_t)0x9f, (uint8_t)0x24, (uint8_t)0x45, (uint8_t)0xdf, (uint8_t)0x4f, (uint8_t)0x9b, (uint8_t)0x17, (uint8_t)0xad, (uint8_t)0x2b, (uint8_t)0x41, (uint8_t)0x7b, (uint8_t)0xe6, (uint8_t)0x6c, (uint8_t)0x37, (uint8_t)0x10 };

	// print text to encrypt, key and IV
	printf("ECB encrypt verbose:\n\n");
	printf("plain text:\n");
	for (i = (uint8_t)0; i < (uint8_t)4; ++i)
	{
		phex(plain_text + i * (uint8_t)16);
	}
	printf("\n");

	printf("key:\n");
	phex(key);
	printf("\n");

	// print the resulting cipher as 4 x 16 byte strings
	printf("ciphertext:\n");

	struct AES_ctx ctx;
	AES_init_ctx(&ctx, key);

	for (i = 0; i < 4; ++i)
	{
		AES_ECB_encrypt(&ctx, plain_text + (i * 16));
		phex(plain_text + (i * 16));
	}
	printf("\n");
}


static int test_encrypt_ecb(void)
{
#if defined(AES256)
	uint8_t key[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
					  0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
	uint8_t out[] = { 0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8 };
#elif defined(AES192)
	uint8_t key[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
					  0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
	uint8_t out[] = { 0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc };
#elif defined(AES128)
	uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
	uint8_t out[] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
#endif

	uint8_t in[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
	struct AES_ctx ctx;

	AES_init_ctx(&ctx, key);
	AES_ECB_encrypt(&ctx, in);

	printf("ECB encrypt: ");

	if (0 == memcmp((char*)out, (char*)in, 16)) {
		printf("SUCCESS!\n");
		return(0);
	}
	else {
		printf("FAILURE!\n");
		return(1);
	}
}

static int test_decrypt_cbc(void)
{

#if defined(AES256)
	uint8_t key[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
					  0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
	uint8_t in[] = { 0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6,
					  0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d, 0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70, 0x2c, 0x7d,
					  0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf, 0xa5, 0x30, 0xe2, 0x63, 0x04, 0x23, 0x14, 0x61,
					  0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc, 0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b };
#elif defined(AES192)
	uint8_t key[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
	uint8_t in[] = { 0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8,
					  0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14, 0x5a,
					  0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0,
					  0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd };
#elif defined(AES128)
	uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
	uint8_t in[] = { 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
					  0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
					  0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
					  0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7 };
#endif
	uint8_t iv[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
	uint8_t out[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
					  0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
					  0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
					  0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
	//  uint8_t buffer[64];
	struct AES_ctx ctx;

	AES_init_ctx_iv(&ctx, key, iv);
	AES_CBC_decrypt_buffer(&ctx, in, 64);

	printf("CBC decrypt: ");

	if (0 == memcmp((char*)out, (char*)in, 64)) {
		printf("SUCCESS!\n");
		return(0);
	}
	else {
		printf("FAILURE!\n");
		return(1);
	}
}

static int test_encrypt_cbc(void)
{
#if defined(AES256)
	uint8_t key[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
					  0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
	uint8_t out[] = { 0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6,
					  0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d, 0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70, 0x2c, 0x7d,
					  0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf, 0xa5, 0x30, 0xe2, 0x63, 0x04, 0x23, 0x14, 0x61,
					  0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc, 0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b };
#elif defined(AES192)
	uint8_t key[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
	uint8_t out[] = { 0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8,
					  0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14, 0x5a,
					  0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0,
					  0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd };
#elif defined(AES128)
	uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
	uint8_t out[] = { 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
					  0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
					  0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
					  0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7 };
#endif
	uint8_t iv[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
	uint8_t in[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
					  0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
					  0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
					  0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
	struct AES_ctx ctx;

	AES_init_ctx_iv(&ctx, key, iv);
	AES_CBC_encrypt_buffer(&ctx, in, 64);

	printf("CBC encrypt: ");

	if (0 == memcmp((char*)out, (char*)in, 64)) {
		printf("SUCCESS!\n");
		return(0);
	}
	else {
		printf("FAILURE!\n");
		return(1);
	}
}

static int test_xcrypt_ctr(const char* xcrypt);
static int test_encrypt_ctr(void)
{
	return test_xcrypt_ctr("encrypt");
}

static int test_decrypt_ctr(void)
{
	return test_xcrypt_ctr("decrypt");
}

static int test_xcrypt_ctr(const char* xcrypt)
{
#if defined(AES256)
	uint8_t key[32] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
						0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
	uint8_t in[64] = { 0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5, 0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28,
						0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a, 0xca, 0x84, 0xe9, 0x90, 0xca, 0xca, 0xf5, 0xc5,
						0x2b, 0x09, 0x30, 0xda, 0xa2, 0x3d, 0xe9, 0x4c, 0xe8, 0x70, 0x17, 0xba, 0x2d, 0x84, 0x98, 0x8d,
						0xdf, 0xc9, 0xc5, 0x8d, 0xb6, 0x7a, 0xad, 0xa6, 0x13, 0xc2, 0xdd, 0x08, 0x45, 0x79, 0x41, 0xa6 };
#elif defined(AES192)
	uint8_t key[24] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
						0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
	uint8_t in[64] = { 0x1a, 0xbc, 0x93, 0x24, 0x17, 0x52, 0x1c, 0xa2, 0x4f, 0x2b, 0x04, 0x59, 0xfe, 0x7e, 0x6e, 0x0b,
						0x09, 0x03, 0x39, 0xec, 0x0a, 0xa6, 0xfa, 0xef, 0xd5, 0xcc, 0xc2, 0xc6, 0xf4, 0xce, 0x8e, 0x94,
						0x1e, 0x36, 0xb2, 0x6b, 0xd1, 0xeb, 0xc6, 0x70, 0xd1, 0xbd, 0x1d, 0x66, 0x56, 0x20, 0xab, 0xf7,
						0x4f, 0x78, 0xa7, 0xf6, 0xd2, 0x98, 0x09, 0x58, 0x5a, 0x97, 0xda, 0xec, 0x58, 0xc6, 0xb0, 0x50 };
#elif defined(AES128)
	uint8_t key[16] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
	uint8_t in[64] = { 0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26, 0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce,
						0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff, 0x86, 0x17, 0x18, 0x7b, 0xb9, 0xff, 0xfd, 0xff,
						0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e, 0x5b, 0x4f, 0x09, 0x02, 0x0d, 0xb0, 0x3e, 0xab,
						0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1, 0x79, 0x21, 0x70, 0xa0, 0xf3, 0x00, 0x9c, 0xee };
#endif
	uint8_t iv[16] = { 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff };
	uint8_t out[64] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
						0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
						0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
						0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
	struct AES_ctx ctx;

	AES_init_ctx_iv(&ctx, key, iv);
	AES_CTR_xcrypt_buffer(&ctx, in, 64);

	printf("CTR %s: ", xcrypt);

	if (0 == memcmp((char *)out, (char *)in, 64)) {
		printf("SUCCESS!\n");
		return(0);
	}
	else {
		printf("FAILURE!\n");
		return(1);
	}
}


static int test_decrypt_ecb(void)
{
#if defined(AES256)
	uint8_t key[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
					  0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
	uint8_t in[] = { 0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8 };
#elif defined(AES192)
	uint8_t key[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
					  0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
	uint8_t in[] = { 0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc };
#elif defined(AES128)
	uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
	uint8_t in[] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
#endif

	uint8_t out[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
	struct AES_ctx ctx;

	AES_init_ctx(&ctx, key);
	AES_ECB_decrypt(&ctx, in);

	printf("ECB decrypt: ");

	if (0 == memcmp((char*)out, (char*)in, 16)) {
		printf("SUCCESS!\n");
		return(0);
	}
	else {
		printf("FAILURE!\n");
		return(1);
	}
}






static PyObject* my_recursive_tolist(PyArrayObject* self, char* dataptr, int startdim)
{
	npy_intp i, n, stride;
	PyObject* ret, * item;

	/* Base case */
	if (startdim >= PyArray_NDIM(self)) {
		return PyArray_GETITEM(self, dataptr);
	}

	n = PyArray_DIM(self, startdim);
	stride = PyArray_STRIDE(self, startdim);

	ret = PyList_New(n);
	if (ret == NULL) {
		return NULL;
	}

	for (i = 0; i < n; ++i) {
		item = my_recursive_tolist(self, dataptr, startdim + 1);
		if (item == NULL) {
			Py_DECREF(ret);
			return NULL;
		}
		PyList_SET_ITEM(ret, i, item);

		dataptr += stride;
	}

	return ret;
}